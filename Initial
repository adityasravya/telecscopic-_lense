/*
 * We need to read the analog value across the resistors. Assign an ADC for the same.
 * The battery voltage level also needs to be read. Assign another ADC for reading the battery voltage level.
 */

const int brightness_adc = A0;        // ADC to read the analog signal in the resistor
const int battery_adc = A1;         // ADC to read the battery voltage


int i;                                // variable for looping through the lookup table

/*
 * The LED needs to be connected to a digital pin.
 */

const int  LED_Pin = 3;             // The LED is connected to the digital pin 3 ~ because it is PWM enabled.  PWM is required for controlling the brightness of the LED.


/*
 * The values read by the ADCs have to be stored in variables. Declare the variables holding the values read by the ADCs
 */

int brightness_value;                // The ADC reading the analog signal in the resistor stores it in this variable
int Battery_Voltage;                // The ADC reading the analog signal in the resistor stores it in this variable
int Brightness_Level;


/*
 * LED Brightness Lookup Table
 * 
 * A lookup table is to be made so that the microcontroller can cross-check the analog input and required brightness.
 * The lookup table contains the standard ADC values (lower limit and higher limit) for each resistance and corresponding value mapped to (255, 20) range.
 * Any ADC values within the lower and higher limits will be mapped to the corresponding brightness level by refering the lookup table.
 */


/*
 * LED Brightness Lookup Table Setup
 */

typedef struct                      // Define a structure with 3 datasets, the lower limit of ADC value, higher limit of ADC value and the value mapped to the (255, 20) range
{
  /*
   * Each of the entry in the Brightness_Control_Lookup table will have min_ADC_value, which holds the lower limit of ADC value, 
   * max_ADC_value, which holds the higher limit of ADC value, and mapped_value, which holds the equivalent mapped value to the
   * range (255, 0)
   */
   
    int min_ADC_value;              
    int max_ADC_value;
    int mapped_value;
    
}Brightness_Control_Lookup;


/*
 * Brightness_Control_Lookup Table Data
 */

Brightness_Control_Lookup Data_Table[9] = 
{
{367, 376, 255},
{380, 390, 228},
{418, 429, 146},
{430, 442, 115},
{443, 451, 96},
{452, 462, 77},
{463, 480, 31},
{481, 483, 25},
{484, 484, 20},
};





void setup() 
{
 
  pinMode(brightness_adc,INPUT);          // The ADC for reading the resistor analog signal is declared as an INPUT GPIO
  pinMode(battery_adc,INPUT);             // The ADC for reading the battery voltage analog signal is declared as an INPUT GPIO
  pinMode(LED_Pin,OUTPUT);                // The LED pin is declared as an OUTPUT GPIO

  //Serial.begin(9600);
}


void loop() 
{
 
  brightness_value = analogRead(brightness_adc);        // The analog value at the resistor is read using the ADC
  
  
  //Serial.print("/n Brightness ADC value");
  //Serial.print(brightness_value);
  
  
  //Battery_Voltage = analogRead(battery_adc);            // The battery voltage is read using the ADC
  
  
  //Serial.print("/n Battery Voltage ADC value");
  //Serial.print(Battery_Voltage);

  Low_Battery_Voltage();                                // Low battery voltage detection and alert function  

  LED_Brightness_Control();                             // LED brightness control function         
       
}



/*
 * Low Battery voltage detection and alert
 * 
 */

void Low_Battery_Voltage()
{
  Battery_Voltage = analogRead(battery_adc);            // The battery voltage is read using the ADC
  int critical_voltage = 1.8;

  /*
   * The battery voltage read by the ADC needs to be converted to actual voltage.
   * This is done using the following formula
   * 
   *          Resolution of ADC/System Voltage = ADC Reading/Analog Voltage Measured
   *          
   *          The Resolution of ADC is (2^10)-1 = 1023 as we have a 10 bit ADC in Arduino Uno
   *          The System Voltage is the maximum possible voltage ~ here it is 3.3 V
   *          The ADC reading is the value stored in the "Battery_Voltage"
   *          The Analog Voltage Measured is the current voltage of the battery that needs to be measured
   *          
   * 
   */

  int current_battery_voltage = (Battery_Voltage*3.3)/1023;

  if(current_battery_voltage <= critical_voltage);               // check if the voltage of battery is lower than the critical value
  {
    LED_Blink();                                                 // if the voltage of battery is lower than critical, blink the LED  
  }
 
}

/*
 * LED Blink function
 */
 
void LED_Blink()                                                // declaring the LED_Blink function
{
  int LED_State = LOW;                                          // initializing the state of LED
  unsigned long Previous_time_reading = 0;                      // variable to compare the time reading
  unsigned long Current_time_reading = millis();                // the current time reading is recorded
  /*
   * The delay() is mimicked here. The time reading is taken continuously and when the time gap is 1 sec the Previous_time_reading is over-written with Current_time_reading
   * And the LED is toggled between HIGH and LOW.
   */
  if((Current_time_reading-Previous_time_reading)>=1000)        // check if the time gap between previous reading and current reading is 1 s
  {
    Previous_time_reading = Current_time_reading;               // over-write the previous reading with the current value
    if(LED_State == LOW)                                        // check the status of LED
    {
      LED_State = HIGH;                                         // toggle the state of LED
    }
    else
    {
      LED_State = LOW;
    }
  }
  
}





/*
 * LED Brightness control
 * Look up table: 
 * Resistor | ADC Value | Brightness
 * 100      | 1000      | 255
 * 300      | 800       | 200
 * 600      | 600       | 180
 * 1000     | 400       | 140
 * 1200     | 200       | 100
 * 1600     | 100       | 50
 * 1800     | 50        | 10
 * infinite | 0 or unknown | 0
 * 
 * char loopup[15] = [1000,800,600,400,200,100,0];
 * 
 */


/*
 * LED Brightness control
 * 
 */


void LED_Brightness_Control()
{

  
  
  for (i=0; i<9; i++)
  {
    if (brightness_value>=Data_Table[i].min_ADC_value && brightness_value<=Data_Table[i].max_ADC_value)
    {
      Brightness_Level = Data_Table[i].mapped_value;
      break;
    }
  }
  
  
  
  // brightness_value is the ADC value of the ADC recording the resistance analog value
  
  //Brightness_Level = map(brightness_value, 0, 1023, 0, 255);        // The required brightness level recorded by the ADC is 
                                                                    // mapped to the value between 0 and 255
  
  Serial.print("Brightness Level mapped ");
  Serial.println(Brightness_Level);

  
  analogWrite(LED_Pin,Brightness_Level);                            
  
}


